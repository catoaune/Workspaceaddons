// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package WorkspaceAddOns

// An action that describes the behavior when a form is submitted - triggered from
// an onclick event on an input widget (e.g. button).
type Action struct {
	// The apps script callback function or the https endpoint if using alternate
	// runtimes.
	Function string `json:"function" yaml:"function" mapstructure:"function"`
}

// An action that describes the behavior when a form is submitted - triggered from
// an onclick event on an input widget (e.g. button).
type Action_1 struct {
	// The apps script callback function or the https endpoint if using alternate
	// runtimes.
	Function string `json:"function" yaml:"function" mapstructure:"function"`
}

// Google Workspace add-on response to interact with the end user. The most common
// interaction is to render a card with a navigation.
type Action_2 struct {
	// Immediately open the target link in a new tab or a popup.
	Link OpenLink_1 `json:"link,omitempty" yaml:"link,omitempty" mapstructure:"link,omitempty"`

	// Specify the navigation within the card stack.
	Navigations []Navigation `json:"navigations,omitempty" yaml:"navigations,omitempty" mapstructure:"navigations,omitempty"`

	// Display a notification to the end-user.
	Notification *Notification `json:"notification,omitempty" yaml:"notification,omitempty" mapstructure:"notification,omitempty"`
}

// Google Workspace add-on response to interact with the end user. The most common
// interaction is to render a card with a navigation.
type Action_3 struct {
	// Immediately open the target link in a new tab or a popup.
	Link OpenLink_1 `json:"link,omitempty" yaml:"link,omitempty" mapstructure:"link,omitempty"`

	// Specify the navigation within the card stack.
	Navigations []Navigation_1 `json:"navigations,omitempty" yaml:"navigations,omitempty" mapstructure:"navigations,omitempty"`

	// Display a notification to the end-user.
	Notification *Notification_1 `json:"notification,omitempty" yaml:"notification,omitempty" mapstructure:"notification,omitempty"`
}

// A map of parameter string keys and values. These keys and values are defined by
// the add-on developer to attach information to a specific conference for the
// add-on's use.
type AddOnParameters struct {
	// Parameters corresponds to the JSON schema field "parameters".
	Parameters AddOnParametersParameters `json:"parameters,omitempty" yaml:"parameters,omitempty" mapstructure:"parameters,omitempty"`
}

type AddOnParametersParameters map[string]string

type AddOnParametersParameters_1 map[string]string

// A map of parameter string keys and values. These keys and values are defined by
// the add-on developer to attach information to a specific conference for the
// add-on's use.
type AddOnParameters_1 struct {
	// Parameters corresponds to the JSON schema field "parameters".
	Parameters AddOnParametersParameters_1 `json:"parameters,omitempty" yaml:"parameters,omitempty" mapstructure:"parameters,omitempty"`
}

type Attendee struct {
	// The number of additional guests the attendee had indicated they are bringing.
	// Defaults to zero.
	AdditionalGuests int `json:"additionalGuests,omitempty" yaml:"additionalGuests,omitempty" mapstructure:"additionalGuests,omitempty"`

	// The attendee's response comment, if any.
	Comment *string `json:"comment,omitempty" yaml:"comment,omitempty" mapstructure:"comment,omitempty"`

	// The attendee displayed name.
	DisplayName *string `json:"displayName,omitempty" yaml:"displayName,omitempty" mapstructure:"displayName,omitempty"`

	// The attendee email address.
	Email *string `json:"email,omitempty" yaml:"email,omitempty" mapstructure:"email,omitempty"`

	// true if the attendance for this attendee is marked as optional; false
	// otherwise.
	Optional *bool `json:"optional,omitempty" yaml:"optional,omitempty" mapstructure:"optional,omitempty"`

	// true if the attendee is an organizer for this event.
	Organizer *bool `json:"organizer,omitempty" yaml:"organizer,omitempty" mapstructure:"organizer,omitempty"`

	// true if the attendee represents a resource, such as room or piece of equipment;
	// false otherwise.
	Resource *bool `json:"resource,omitempty" yaml:"resource,omitempty" mapstructure:"resource,omitempty"`

	// The attendee's response status. Possible values include the following:
	// accepted: The attendee has accepted the event invitation.
	// declined: The attendee has declined the event invitation.
	// needsAction: The attendee has not responded to the event invitation.
	// tentative: The attendee has tentatively accepted the event invitation.
	ResponseStatus *string `json:"responseStatus,omitempty" yaml:"responseStatus,omitempty" mapstructure:"responseStatus,omitempty"`

	// true if this attendee represents the calendar in which this event appears;
	// false otherwise.
	Self *bool `json:"self,omitempty" yaml:"self,omitempty" mapstructure:"self,omitempty"`
}

type Attendee_1 struct {
	// The number of additional guests the attendee had indicated they are bringing.
	// Defaults to zero.
	AdditionalGuests int `json:"additionalGuests,omitempty" yaml:"additionalGuests,omitempty" mapstructure:"additionalGuests,omitempty"`

	// The attendee's response comment, if any.
	Comment *string `json:"comment,omitempty" yaml:"comment,omitempty" mapstructure:"comment,omitempty"`

	// The attendee displayed name.
	DisplayName *string `json:"displayName,omitempty" yaml:"displayName,omitempty" mapstructure:"displayName,omitempty"`

	// The attendee email address.
	Email *string `json:"email,omitempty" yaml:"email,omitempty" mapstructure:"email,omitempty"`

	// true if the attendance for this attendee is marked as optional; false
	// otherwise.
	Optional *bool `json:"optional,omitempty" yaml:"optional,omitempty" mapstructure:"optional,omitempty"`

	// true if the attendee is an organizer for this event.
	Organizer *bool `json:"organizer,omitempty" yaml:"organizer,omitempty" mapstructure:"organizer,omitempty"`

	// true if the attendee represents a resource, such as room or piece of equipment;
	// false otherwise.
	Resource *bool `json:"resource,omitempty" yaml:"resource,omitempty" mapstructure:"resource,omitempty"`

	// The attendee's response status. Possible values include the following:
	// accepted: The attendee has accepted the event invitation.
	// declined: The attendee has declined the event invitation.
	// needsAction: The attendee has not responded to the event invitation.
	// tentative: The attendee has tentatively accepted the event invitation.
	ResponseStatus *string `json:"responseStatus,omitempty" yaml:"responseStatus,omitempty" mapstructure:"responseStatus,omitempty"`

	// true if this attendee represents the calendar in which this event appears;
	// false otherwise.
	Self *bool `json:"self,omitempty" yaml:"self,omitempty" mapstructure:"self,omitempty"`
}

type AuthorizationEventObject struct {
	// An ID token for the Google Workspace Add-ons service account for this
	// deployment
	SystemIdToken *string `json:"systemIdToken,omitempty" yaml:"systemIdToken,omitempty" mapstructure:"systemIdToken,omitempty"`

	// An end-user ID token, if appropriate ID scopes are requested
	UserIdToken *string `json:"userIdToken,omitempty" yaml:"userIdToken,omitempty" mapstructure:"userIdToken,omitempty"`

	// The end user OAuth access token, authorized with the requested scopes
	UserOAuthToken *string `json:"userOAuthToken,omitempty" yaml:"userOAuthToken,omitempty" mapstructure:"userOAuthToken,omitempty"`
}

// A border style.
type BorderStyle struct {
	// The border corner radius.
	CornerRadius *float64 `json:"cornerRadius,omitempty" yaml:"cornerRadius,omitempty" mapstructure:"cornerRadius,omitempty"`

	// The border color.
	StrokeColor *Color `json:"strokeColor,omitempty" yaml:"strokeColor,omitempty" mapstructure:"strokeColor,omitempty"`

	// The border type.
	Type BorderStyleType `json:"type" yaml:"type" mapstructure:"type"`
}

type BorderStyleType string

const BorderStyleTypeNOBORDER BorderStyleType = "NO_BORDER"
const BorderStyleTypeSTROKE BorderStyleType = "STROKE"

type BorderStyleType_1 string

const BorderStyleType_1_NOBORDER BorderStyleType_1 = "NO_BORDER"
const BorderStyleType_1_STROKE BorderStyleType_1 = "STROKE"

// A border style.
type BorderStyle_1 struct {
	// The border corner radius.
	CornerRadius *float64 `json:"cornerRadius,omitempty" yaml:"cornerRadius,omitempty" mapstructure:"cornerRadius,omitempty"`

	// The border color.
	StrokeColor *Color_1 `json:"strokeColor,omitempty" yaml:"strokeColor,omitempty" mapstructure:"strokeColor,omitempty"`

	// The border type.
	Type BorderStyleType_1 `json:"type" yaml:"type" mapstructure:"type"`
}

// A button. Can be a text button or an image button.
type Button struct {
	// If set, the button is filled with solid background.
	Color *Color `json:"color,omitempty" yaml:"color,omitempty" mapstructure:"color,omitempty"`

	// If true, the button is displayed in a disabled state and doesn't respond to
	// user actions
	Disabled *bool `json:"disabled,omitempty" yaml:"disabled,omitempty" mapstructure:"disabled,omitempty"`

	// The icon image
	Icon *Icon `json:"icon,omitempty" yaml:"icon,omitempty" mapstructure:"icon,omitempty"`

	// The onClick action of the button.
	OnClick OnClick `json:"onClick" yaml:"onClick" mapstructure:"onClick"`

	// The text of the button.
	Text string `json:"text" yaml:"text" mapstructure:"text"`
}

type ButtonList struct {
	// A list of buttons laid out horizontally
	Buttons []Button `json:"buttons,omitempty" yaml:"buttons,omitempty" mapstructure:"buttons,omitempty"`
}

type ButtonList_1 struct {
	// A list of buttons laid out horizontally
	Buttons []Button_1 `json:"buttons,omitempty" yaml:"buttons,omitempty" mapstructure:"buttons,omitempty"`
}

// A button. Can be a text button or an image button.
type Button_1 struct {
	// If set, the button is filled with solid background.
	Color *Color_1 `json:"color,omitempty" yaml:"color,omitempty" mapstructure:"color,omitempty"`

	// If true, the button is displayed in a disabled state and doesn't respond to
	// user actions
	Disabled *bool `json:"disabled,omitempty" yaml:"disabled,omitempty" mapstructure:"disabled,omitempty"`

	// The icon image
	Icon *Icon_1 `json:"icon,omitempty" yaml:"icon,omitempty" mapstructure:"icon,omitempty"`

	// The onClick action of the button.
	OnClick OnClick_1 `json:"onClick" yaml:"onClick" mapstructure:"onClick"`

	// The text of the button.
	Text string `json:"text" yaml:"text" mapstructure:"text"`
}

type CalendarClientActionMarkup struct {
	// EditAttendeesActionMarkup corresponds to the JSON schema field
	// "editAttendeesActionMarkup".
	EditAttendeesActionMarkup *EditAttendeesActionMarkup `json:"editAttendeesActionMarkup,omitempty" yaml:"editAttendeesActionMarkup,omitempty" mapstructure:"editAttendeesActionMarkup,omitempty"`

	// EditConferenceDataActionMarkup corresponds to the JSON schema field
	// "editConferenceDataActionMarkup".
	EditConferenceDataActionMarkup *EditConferenceDataActionMarkup `json:"editConferenceDataActionMarkup,omitempty" yaml:"editConferenceDataActionMarkup,omitempty" mapstructure:"editConferenceDataActionMarkup,omitempty"`
}

type CalendarClientActionMarkup_1 struct {
	// EditAttendeesActionMarkup corresponds to the JSON schema field
	// "editAttendeesActionMarkup".
	EditAttendeesActionMarkup *EditAttendeesActionMarkup_1 `json:"editAttendeesActionMarkup,omitempty" yaml:"editAttendeesActionMarkup,omitempty" mapstructure:"editAttendeesActionMarkup,omitempty"`

	// EditConferenceDataActionMarkup corresponds to the JSON schema field
	// "editConferenceDataActionMarkup".
	EditConferenceDataActionMarkup *EditConferenceDataActionMarkup_1 `json:"editConferenceDataActionMarkup,omitempty" yaml:"editConferenceDataActionMarkup,omitempty" mapstructure:"editConferenceDataActionMarkup,omitempty"`
}

// The Calendar event object is the portion of the overall event object that
// carries information about a user's calendar and calendar events. It's only
// present in an event object if the host application is Google Calendar.
type CalendarEventObject struct {
	// A list of the attendees of the calendar event.
	Attendees []Attendee `json:"attendees,omitempty" yaml:"attendees,omitempty" mapstructure:"attendees,omitempty"`

	// The calendar ID.
	CalendarId *string `json:"calendarId,omitempty" yaml:"calendarId,omitempty" mapstructure:"calendarId,omitempty"`

	// An object describing the capabilities of the add-on to view or update event
	// information.
	Capabilities *CalendarEventObjectCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// An object representing any conference data associated with this event, such as
	// Google Meet conference details.
	ConferenceData *ConferenceData `json:"conferenceData,omitempty" yaml:"conferenceData,omitempty" mapstructure:"conferenceData,omitempty"`

	// The event ID.
	Id *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// An object representing the organizer of the event.
	Organizer *CalendarEventObjectOrganizer `json:"organizer,omitempty" yaml:"organizer,omitempty" mapstructure:"organizer,omitempty"`

	// The ID of a recurring event.
	RecurringEventId *string `json:"recurringEventId,omitempty" yaml:"recurringEventId,omitempty" mapstructure:"recurringEventId,omitempty"`
}

// An object describing the capabilities of the add-on to view or update event
// information.
type CalendarEventObjectCapabilities struct {
	// true if the add-on can add new attendees to the event attendee list; false
	// otherwise.
	CanAddAttendees *bool `json:"canAddAttendees,omitempty" yaml:"canAddAttendees,omitempty" mapstructure:"canAddAttendees,omitempty"`

	// true if the add-on can read the event attendee list; false otherwise.
	CanSeeAttendees *bool `json:"canSeeAttendees,omitempty" yaml:"canSeeAttendees,omitempty" mapstructure:"canSeeAttendees,omitempty"`

	// true if the add-on can read the event conference data; false otherwise.
	CanSeeConferenceData *bool `json:"canSeeConferenceData,omitempty" yaml:"canSeeConferenceData,omitempty" mapstructure:"canSeeConferenceData,omitempty"`

	// true if the add-on can update the event conference data; false otherwise.
	CanSetConferenceData *bool `json:"canSetConferenceData,omitempty" yaml:"canSetConferenceData,omitempty" mapstructure:"canSetConferenceData,omitempty"`
}

// An object describing the capabilities of the add-on to view or update event
// information.
type CalendarEventObjectCapabilities_1 struct {
	// true if the add-on can add new attendees to the event attendee list; false
	// otherwise.
	CanAddAttendees *bool `json:"canAddAttendees,omitempty" yaml:"canAddAttendees,omitempty" mapstructure:"canAddAttendees,omitempty"`

	// true if the add-on can read the event attendee list; false otherwise.
	CanSeeAttendees *bool `json:"canSeeAttendees,omitempty" yaml:"canSeeAttendees,omitempty" mapstructure:"canSeeAttendees,omitempty"`

	// true if the add-on can read the event conference data; false otherwise.
	CanSeeConferenceData *bool `json:"canSeeConferenceData,omitempty" yaml:"canSeeConferenceData,omitempty" mapstructure:"canSeeConferenceData,omitempty"`

	// true if the add-on can update the event conference data; false otherwise.
	CanSetConferenceData *bool `json:"canSetConferenceData,omitempty" yaml:"canSetConferenceData,omitempty" mapstructure:"canSetConferenceData,omitempty"`
}

// An object representing the organizer of the event.
type CalendarEventObjectOrganizer struct {
	// The event organizer's email address.
	Email *string `json:"email,omitempty" yaml:"email,omitempty" mapstructure:"email,omitempty"`
}

// An object representing the organizer of the event.
type CalendarEventObjectOrganizer_1 struct {
	// The event organizer's email address.
	Email *string `json:"email,omitempty" yaml:"email,omitempty" mapstructure:"email,omitempty"`
}

// The Calendar event object is the portion of the overall event object that
// carries information about a user's calendar and calendar events. It's only
// present in an event object if the host application is Google Calendar.
type CalendarEventObject_1 struct {
	// A list of the attendees of the calendar event.
	Attendees []Attendee_1 `json:"attendees,omitempty" yaml:"attendees,omitempty" mapstructure:"attendees,omitempty"`

	// The calendar ID.
	CalendarId *string `json:"calendarId,omitempty" yaml:"calendarId,omitempty" mapstructure:"calendarId,omitempty"`

	// An object describing the capabilities of the add-on to view or update event
	// information.
	Capabilities *CalendarEventObjectCapabilities_1 `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// An object representing any conference data associated with this event, such as
	// Google Meet conference details.
	ConferenceData *ConferenceData_1 `json:"conferenceData,omitempty" yaml:"conferenceData,omitempty" mapstructure:"conferenceData,omitempty"`

	// The event ID.
	Id *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// An object representing the organizer of the event.
	Organizer *CalendarEventObjectOrganizer_1 `json:"organizer,omitempty" yaml:"organizer,omitempty" mapstructure:"organizer,omitempty"`

	// The ID of a recurring event.
	RecurringEventId *string `json:"recurringEventId,omitempty" yaml:"recurringEventId,omitempty" mapstructure:"recurringEventId,omitempty"`
}

type Card struct {
	// The actions of this card.
	CardActions CardAction `json:"cardActions,omitempty" yaml:"cardActions,omitempty" mapstructure:"cardActions,omitempty"`

	// The Display Style for the peekCardHeader.
	DisplayStyle *CardDisplayStyle `json:"displayStyle,omitempty" yaml:"displayStyle,omitempty" mapstructure:"displayStyle,omitempty"`

	// The fixed footer that is shown at the bottom of this card.
	FixedFooter CardFixedFooter `json:"fixedFooter,omitempty" yaml:"fixedFooter,omitempty" mapstructure:"fixedFooter,omitempty"`

	// The Header of the card.
	Header *CardHeader `json:"header,omitempty" yaml:"header,omitempty" mapstructure:"header,omitempty"`

	// Name of the card which is used as an identifier for the card in the card
	// navigation.
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// When displaying contextual content, the peek card header acts as a placeholder
	// so that the user can
	// navigate forward between the homepage cards and the contextual cards.
	PeekCardHeader *CardHeader `json:"peekCardHeader,omitempty" yaml:"peekCardHeader,omitempty" mapstructure:"peekCardHeader,omitempty"`

	// A card consist of 1 or more sections. Widgets are defined within a section.
	Sections []Section `json:"sections" yaml:"sections" mapstructure:"sections"`
}

// A Card action is the action associated with the card.
type CardAction interface{}

// A Card action is the action associated with the card.
type CardAction_1 interface{}

type CardDisplayStyle string

const CardDisplayStyleDISPLAYSTYLEUNSPECIFIED CardDisplayStyle = "DISPLAY_STYLE_UNSPECIFIED"
const CardDisplayStylePEEK CardDisplayStyle = "PEEK"
const CardDisplayStyleREPLACE CardDisplayStyle = "REPLACE"

type CardDisplayStyle_1 string

const CardDisplayStyle_1_DISPLAYSTYLEUNSPECIFIED CardDisplayStyle_1 = "DISPLAY_STYLE_UNSPECIFIED"
const CardDisplayStyle_1_PEEK CardDisplayStyle_1 = "PEEK"
const CardDisplayStyle_1_REPLACE CardDisplayStyle_1 = "REPLACE"

// A persistent (sticky) footer that is added to the bottom of the card.
type CardFixedFooter interface{}

// A persistent (sticky) footer that is added to the bottom of the card.
type CardFixedFooter interface{}

// Optional header in the card.
type CardHeader struct {
	// The Alternative text of this image
	ImageAltText *string `json:"imageAltText,omitempty" yaml:"imageAltText,omitempty" mapstructure:"imageAltText,omitempty"`

	// Define the cropping of the image in the header.
	ImageType *CardHeaderImageType_1 `json:"imageType,omitempty" yaml:"imageType,omitempty" mapstructure:"imageType,omitempty"`

	// Optional - renders an image on the right of the title.
	ImageUrl *string `json:"imageUrl,omitempty" yaml:"imageUrl,omitempty" mapstructure:"imageUrl,omitempty"`

	// Optional - renders beneath the title. If not specified, title will take up both
	// lines.
	Subtitle *string `json:"subtitle,omitempty" yaml:"subtitle,omitempty" mapstructure:"subtitle,omitempty"`

	// Required title in the header.
	Title string `json:"title" yaml:"title" mapstructure:"title"`
}

// Optional header in the card.
type CardHeader struct {
	// The Alternative text of this image
	ImageAltText *string `json:"imageAltText,omitempty" yaml:"imageAltText,omitempty" mapstructure:"imageAltText,omitempty"`

	// Define the cropping of the image in the header.
	ImageType *CardHeaderImageType `json:"imageType,omitempty" yaml:"imageType,omitempty" mapstructure:"imageType,omitempty"`

	// Optional - renders an image on the right of the title.
	ImageUrl *string `json:"imageUrl,omitempty" yaml:"imageUrl,omitempty" mapstructure:"imageUrl,omitempty"`

	// Optional - renders beneath the title. If not specified, title will take up both
	// lines.
	Subtitle *string `json:"subtitle,omitempty" yaml:"subtitle,omitempty" mapstructure:"subtitle,omitempty"`

	// Required title in the header.
	Title string `json:"title" yaml:"title" mapstructure:"title"`
}

type CardHeaderImageType string

const CardHeaderImageTypeCIRCLE CardHeaderImageType = "CIRCLE"
const CardHeaderImageTypeSQUARE CardHeaderImageType = "SQUARE"

type CardHeaderImageType_1 string

const CardHeaderImageType_1_CIRCLE CardHeaderImageType_1 = "CIRCLE"
const CardHeaderImageType_1_SQUARE CardHeaderImageType_1 = "SQUARE"

type Card_1 struct {
	// The actions of this card.
	CardActions CardAction_1 `json:"cardActions,omitempty" yaml:"cardActions,omitempty" mapstructure:"cardActions,omitempty"`

	// The Display Style for the peekCardHeader.
	DisplayStyle *CardDisplayStyle_1 `json:"displayStyle,omitempty" yaml:"displayStyle,omitempty" mapstructure:"displayStyle,omitempty"`

	// The fixed footer that is shown at the bottom of this card.
	FixedFooter CardFixedFooter `json:"fixedFooter,omitempty" yaml:"fixedFooter,omitempty" mapstructure:"fixedFooter,omitempty"`

	// The Header of the card.
	Header *CardHeader `json:"header,omitempty" yaml:"header,omitempty" mapstructure:"header,omitempty"`

	// Name of the card which is used as an identifier for the card in the card
	// navigation.
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// When displaying contextual content, the peek card header acts as a placeholder
	// so that the user can
	// navigate forward between the homepage cards and the contextual cards.
	PeekCardHeader *CardHeader `json:"peekCardHeader,omitempty" yaml:"peekCardHeader,omitempty" mapstructure:"peekCardHeader,omitempty"`

	// A card consist of 1 or more sections. Widgets are defined within a section.
	Sections []Section_1 `json:"sections" yaml:"sections" mapstructure:"sections"`
}

// Represents a color in the RGBA color space.
type Color struct {
	// The alpha value of the color as a value in the interval [0, 1]. 1 is sloid
	// color and 0 is transparent
	Alpha *float64 `json:"alpha,omitempty" yaml:"alpha,omitempty" mapstructure:"alpha,omitempty"`

	// The amount of blue in the color as a value in the interval [0, 1]
	Blue float64 `json:"blue" yaml:"blue" mapstructure:"blue"`

	// The amount of green in the color as a value in the interval [0, 1]
	Green float64 `json:"green" yaml:"green" mapstructure:"green"`

	// The amount of red in the color as a value in the interval [0, 1]
	Red float64 `json:"red" yaml:"red" mapstructure:"red"`
}

// Represents a color in the RGBA color space.
type Color_1 struct {
	// The alpha value of the color as a value in the interval [0, 1]. 1 is sloid
	// color and 0 is transparent
	Alpha *float64 `json:"alpha,omitempty" yaml:"alpha,omitempty" mapstructure:"alpha,omitempty"`

	// The amount of blue in the color as a value in the interval [0, 1]
	Blue float64 `json:"blue" yaml:"blue" mapstructure:"blue"`

	// The amount of green in the color as a value in the interval [0, 1]
	Green float64 `json:"green" yaml:"green" mapstructure:"green"`

	// The amount of red in the color as a value in the interval [0, 1]
	Red float64 `json:"red" yaml:"red" mapstructure:"red"`
}

// An object containing information common to all event objects, regardless of the
// host application.
type CommonEventObject struct {
	// A map containing the current values of the widgets in the displayed card. The
	// map keys are the string IDs assigned with each widget, and each value is
	// another wrapper object with a single "" key.
	FormInputs CommonEventObjectFormInputs `json:"formInputs,omitempty" yaml:"formInputs,omitempty" mapstructure:"formInputs,omitempty"`

	// Indicates the host app the add-on is active in when the event object is
	// generated. Possible values include the following:
	// GMAIL
	// CALENDAR
	// DRIVE
	HostApp *CommonEventObjectHostApp `json:"hostApp,omitempty" yaml:"hostApp,omitempty" mapstructure:"hostApp,omitempty"`

	// Any additional parameters.
	Parameters CommonEventObjectParameters `json:"parameters,omitempty" yaml:"parameters,omitempty" mapstructure:"parameters,omitempty"`

	// Indicates where the event originates (`WEB`, `IOS`, or `ANDROID`)
	Platform *CommonEventObjectPlatform `json:"platform,omitempty" yaml:"platform,omitempty" mapstructure:"platform,omitempty"`

	// The timezone ID and offset. To enable this field, you must set
	// `addOns.common.useLocaleFromApp` to `true` in your add-on's manifest. Your
	// add-on's scope list must also include
	// `https://www.googleapis.com/auth/script.locale`
	//  See https://developers.google.com/workspace/add-ons/how-tos/access-user-locale
	// for more details
	TimeZone *TimeZone `json:"timeZone,omitempty" yaml:"timeZone,omitempty" mapstructure:"timeZone,omitempty"`

	// The user's language and country/region identifier in the format of ISO 639
	// language code-ISO 3166 country/region code. For example, en-US.
	UserLocale *string `json:"userLocale,omitempty" yaml:"userLocale,omitempty" mapstructure:"userLocale,omitempty"`
}

// A map containing the current values of the widgets in the displayed card. The
// map keys are the string IDs assigned with each widget, and each value is another
// wrapper object with a single "" key.
type CommonEventObjectFormInputs map[string]struct {
	// DateInput corresponds to the JSON schema field "dateInput".
	DateInput *DateInput `json:"dateInput,omitempty" yaml:"dateInput,omitempty" mapstructure:"dateInput,omitempty"`

	// DateTimeInput corresponds to the JSON schema field "dateTimeInput".
	DateTimeInput *DateTimeInput `json:"dateTimeInput,omitempty" yaml:"dateTimeInput,omitempty" mapstructure:"dateTimeInput,omitempty"`

	// StringInputs corresponds to the JSON schema field "stringInputs".
	StringInputs *StringInputs `json:"stringInputs,omitempty" yaml:"stringInputs,omitempty" mapstructure:"stringInputs,omitempty"`

	// TimeInput corresponds to the JSON schema field "timeInput".
	TimeInput *TimeInput `json:"timeInput,omitempty" yaml:"timeInput,omitempty" mapstructure:"timeInput,omitempty"`
}

type CommonEventObjectHostApp string

const CommonEventObjectHostAppCALENDAR CommonEventObjectHostApp = "CALENDAR"
const CommonEventObjectHostAppDRIVE CommonEventObjectHostApp = "DRIVE"
const CommonEventObjectHostAppGMAIL CommonEventObjectHostApp = "GMAIL"

// Any additional parameters.
type CommonEventObjectParameters map[string]string

type CommonEventObjectPlatform string

const CommonEventObjectPlatformANDRIOD CommonEventObjectPlatform = "ANDRIOD"
const CommonEventObjectPlatformIOS CommonEventObjectPlatform = "IOS"
const CommonEventObjectPlatformWEB CommonEventObjectPlatform = "WEB"

type ConferenceData struct {
	// The ID of the conference. This ID is meant to allow applications to keep track
	// of conferences; you shouldn't display this ID to users.
	ConferenceId *string `json:"conferenceId,omitempty" yaml:"conferenceId,omitempty" mapstructure:"conferenceId,omitempty"`

	// An object representing the conference solution, such as Hangouts or Google
	// Meet.
	ConferenceSolution *ConferenceSolution `json:"conferenceSolution,omitempty" yaml:"conferenceSolution,omitempty" mapstructure:"conferenceSolution,omitempty"`

	// The list of conference entry points, such as URLs or phone numbers.
	EntryPoints []EntryPoint `json:"entryPoints,omitempty" yaml:"entryPoints,omitempty" mapstructure:"entryPoints,omitempty"`

	// Additional notes (such as instructions from the domain administrator or legal
	// notices) about the conference to display to the user. Can contain HTML. The
	// maximum length is 2048 characters.
	Notes *string `json:"notes,omitempty" yaml:"notes,omitempty" mapstructure:"notes,omitempty"`

	// An object containing a map of defined parameter data for use by the add-on.
	Parameters Parameters `json:"parameters,omitempty" yaml:"parameters,omitempty" mapstructure:"parameters,omitempty"`
}

type ConferenceData_1 struct {
	// The ID of the conference. This ID is meant to allow applications to keep track
	// of conferences; you shouldn't display this ID to users.
	ConferenceId *string `json:"conferenceId,omitempty" yaml:"conferenceId,omitempty" mapstructure:"conferenceId,omitempty"`

	// An object representing the conference solution, such as Hangouts or Google
	// Meet.
	ConferenceSolution *ConferenceSolution_1 `json:"conferenceSolution,omitempty" yaml:"conferenceSolution,omitempty" mapstructure:"conferenceSolution,omitempty"`

	// The list of conference entry points, such as URLs or phone numbers.
	EntryPoints []EntryPoint_1 `json:"entryPoints,omitempty" yaml:"entryPoints,omitempty" mapstructure:"entryPoints,omitempty"`

	// Additional notes (such as instructions from the domain administrator or legal
	// notices) about the conference to display to the user. Can contain HTML. The
	// maximum length is 2048 characters.
	Notes *string `json:"notes,omitempty" yaml:"notes,omitempty" mapstructure:"notes,omitempty"`

	// An object containing a map of defined parameter data for use by the add-on.
	Parameters Parameters_1 `json:"parameters,omitempty" yaml:"parameters,omitempty" mapstructure:"parameters,omitempty"`
}

// An object representing the conference solution, such as Hangouts or Google Meet.
type ConferenceSolution struct {
	// The URI for the user-visible icon representing this conference solution.
	IconUri *string `json:"iconUri,omitempty" yaml:"iconUri,omitempty" mapstructure:"iconUri,omitempty"`

	// The key which uniquely identifies the conference solution for this event.
	Key *ConferenceSolutionKey `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// The user-visible name of this conference solution (not localized).
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

// The key which uniquely identifies the conference solution for this event.
type ConferenceSolutionKey struct {
	// The conference solution type. Possible values include the following:
	// eventHangout for Hangouts for consumers (http://hangouts.google.com).
	// eventNamedHangout for classic Hangouts for Google Workspace users
	// (http://hangouts.google.com).
	// hangoutsMeet for Google Meet (http://meet.google.com).
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// The key which uniquely identifies the conference solution for this event.
type ConferenceSolutionKey_1 struct {
	// The conference solution type. Possible values include the following:
	// eventHangout for Hangouts for consumers (http://hangouts.google.com).
	// eventNamedHangout for classic Hangouts for Google Workspace users
	// (http://hangouts.google.com).
	// hangoutsMeet for Google Meet (http://meet.google.com).
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// An object representing the conference solution, such as Hangouts or Google Meet.
type ConferenceSolution_1 struct {
	// The URI for the user-visible icon representing this conference solution.
	IconUri *string `json:"iconUri,omitempty" yaml:"iconUri,omitempty" mapstructure:"iconUri,omitempty"`

	// The key which uniquely identifies the conference solution for this event.
	Key *ConferenceSolutionKey_1 `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// The user-visible name of this conference solution (not localized).
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

// Input Parameter for Date Picker widget.
type DateInput struct {
	// The time selected by the user, in milliseconds since epoch (00:00:00 UTC on 1
	// January 1970).
	MsSinceEpoch *int `json:"msSinceEpoch,omitempty" yaml:"msSinceEpoch,omitempty" mapstructure:"msSinceEpoch,omitempty"`
}

// Input Parameter for Date and Time Picker widget.
type DateTimeInput struct {
	// true if the input date time includes a date; if false only a time is included.
	HasDate *bool `json:"hasDate,omitempty" yaml:"hasDate,omitempty" mapstructure:"hasDate,omitempty"`

	// true if the input date time includes a time; if false only a date is included.
	HasTime *bool `json:"hasTime,omitempty" yaml:"hasTime,omitempty" mapstructure:"hasTime,omitempty"`

	// The time selected by the user, in milliseconds since epoch (00:00:00 UTC on 1
	// January 1970).
	MsSinceEpoch *int `json:"msSinceEpoch,omitempty" yaml:"msSinceEpoch,omitempty" mapstructure:"msSinceEpoch,omitempty"`
}

// The widget to allow users to specify date and time
type DateTimePicker interface{}

// The widget to allow users to specify date and time
type DateTimePicker_1 interface{}

type DecoratedText struct {
	// The formatted text label that shows below the main text.
	BottomLabel *string `json:"bottomLabel,omitempty" yaml:"bottomLabel,omitempty" mapstructure:"bottomLabel,omitempty"`

	// A button that can be clicked to trigger an action
	Button *Button `json:"button,omitempty" yaml:"button,omitempty" mapstructure:"button,omitempty"`

	// The icon displayed in front of the text.
	Icon *Icon `json:"icon,omitempty" yaml:"icon,omitempty" mapstructure:"icon,omitempty"`

	// Define the cropping of the image.
	ImageType *DecoratedTextImageType `json:"imageType,omitempty" yaml:"imageType,omitempty" mapstructure:"imageType,omitempty"`

	// Only the top/bottom label + content region is clickable.
	OnClick *OnClick `json:"onClick,omitempty" yaml:"onClick,omitempty" mapstructure:"onClick,omitempty"`

	// A switch widget can be clicked to change its state or trigger an action.
	SwitchControl *SwitchControl `json:"switchControl,omitempty" yaml:"switchControl,omitempty" mapstructure:"switchControl,omitempty"`

	// The main widget formatted text.
	Text string `json:"text" yaml:"text" mapstructure:"text"`

	// The formatted text label that shows above the main text.
	TopLabel *string `json:"topLabel,omitempty" yaml:"topLabel,omitempty" mapstructure:"topLabel,omitempty"`

	// The wrap text setting. If true, the text is wrapped and displayed in multiline.
	// Otherwise the text is truncated.
	WrapText *bool `json:"wrapText,omitempty" yaml:"wrapText,omitempty" mapstructure:"wrapText,omitempty"`
}

type DecoratedTextImageType string

const DecoratedTextImageTypeCIRCLE DecoratedTextImageType = "CIRCLE"
const DecoratedTextImageTypeSQUARE DecoratedTextImageType = "SQUARE"

type DecoratedTextImageType_1 string

const DecoratedTextImageType_1_CIRCLE DecoratedTextImageType_1 = "CIRCLE"
const DecoratedTextImageType_1_SQUARE DecoratedTextImageType_1 = "SQUARE"

type DecoratedText_1 struct {
	// The formatted text label that shows below the main text.
	BottomLabel *string `json:"bottomLabel,omitempty" yaml:"bottomLabel,omitempty" mapstructure:"bottomLabel,omitempty"`

	// A button that can be clicked to trigger an action
	Button *Button_1 `json:"button,omitempty" yaml:"button,omitempty" mapstructure:"button,omitempty"`

	// The icon displayed in front of the text.
	Icon *Icon_1 `json:"icon,omitempty" yaml:"icon,omitempty" mapstructure:"icon,omitempty"`

	// Define the cropping of the image.
	ImageType *DecoratedTextImageType_1 `json:"imageType,omitempty" yaml:"imageType,omitempty" mapstructure:"imageType,omitempty"`

	// Only the top/bottom label + content region is clickable.
	OnClick *OnClick_1 `json:"onClick,omitempty" yaml:"onClick,omitempty" mapstructure:"onClick,omitempty"`

	// A switch widget can be clicked to change its state or trigger an action.
	SwitchControl *SwitchControl_1 `json:"switchControl,omitempty" yaml:"switchControl,omitempty" mapstructure:"switchControl,omitempty"`

	// The main widget formatted text.
	Text string `json:"text" yaml:"text" mapstructure:"text"`

	// The formatted text label that shows above the main text.
	TopLabel *string `json:"topLabel,omitempty" yaml:"topLabel,omitempty" mapstructure:"topLabel,omitempty"`

	// The wrap text setting. If true, the text is wrapped and displayed in multiline.
	// Otherwise the text is truncated.
	WrapText *bool `json:"wrapText,omitempty" yaml:"wrapText,omitempty" mapstructure:"wrapText,omitempty"`
}

// A horizontal divider.
type Divider map[string]interface{}

// A horizontal divider.
type Divider_1 map[string]interface{}

// The Docs event object is the portion of the overall event object that carries
// information about a user's Google Docs document. It's only present in an event
// object if the host application is Google Docs.
type DocsEventObject struct {
	//  Whether or not the add-on has drive.file scope permission for this document.
	AddonHasFileScopePermission *bool `json:"addonHasFileScopePermission,omitempty" yaml:"addonHasFileScopePermission,omitempty" mapstructure:"addonHasFileScopePermission,omitempty"`

	// The ID of the document open in the Docs UI
	Id *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Object that contains the URL that matches the pattern set in the link preview
	// trigger.
	MatchedUrl *DocsEventObjectMatchedUrl `json:"matchedUrl,omitempty" yaml:"matchedUrl,omitempty" mapstructure:"matchedUrl,omitempty"`

	// The title of the document open in the Docs UI
	Title *string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`
}

// Object that contains the URL that matches the pattern set in the link preview
// trigger.
type DocsEventObjectMatchedUrl struct {
	// URL that matches the pattern set in the link preview trigger.
	Url *string `json:"url,omitempty" yaml:"url,omitempty" mapstructure:"url,omitempty"`
}

// Object that contains the URL that matches the pattern set in the link preview
// trigger.
type DocsEventObjectMatchedUrl_1 struct {
	// URL that matches the pattern set in the link preview trigger.
	Url *string `json:"url,omitempty" yaml:"url,omitempty" mapstructure:"url,omitempty"`
}

// The Docs event object is the portion of the overall event object that carries
// information about a user's Google Docs document. It's only present in an event
// object if the host application is Google Docs.
type DocsEventObject_1 struct {
	//  Whether or not the add-on has drive.file scope permission for this document.
	AddonHasFileScopePermission *bool `json:"addonHasFileScopePermission,omitempty" yaml:"addonHasFileScopePermission,omitempty" mapstructure:"addonHasFileScopePermission,omitempty"`

	// The ID of the document open in the Docs UI
	Id *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Object that contains the URL that matches the pattern set in the link preview
	// trigger.
	MatchedUrl *DocsEventObjectMatchedUrl_1 `json:"matchedUrl,omitempty" yaml:"matchedUrl,omitempty" mapstructure:"matchedUrl,omitempty"`

	// The title of the document open in the Docs UI
	Title *string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`
}

type DriveClientActionMarkup struct {
	// RequestFileScope corresponds to the JSON schema field "requestFileScope".
	RequestFileScope *DriveClientActionMarkupRequestFileScope `json:"requestFileScope,omitempty" yaml:"requestFileScope,omitempty" mapstructure:"requestFileScope,omitempty"`
}

type DriveClientActionMarkupRequestFileScope struct {
	// ItemId corresponds to the JSON schema field "itemId".
	ItemId *string `json:"itemId,omitempty" yaml:"itemId,omitempty" mapstructure:"itemId,omitempty"`
}

// The Drive event object is the portion of the overall event object that carries
// information about a user's Google Drive and its contents. It's only present in
// an event object if the host application is Google Drive.
type DriveEventObject struct {
	// The Drive item currently active.
	ActiveCursorItem *DriveItemMetaData `json:"activeCursorItem,omitempty" yaml:"activeCursorItem,omitempty" mapstructure:"activeCursorItem,omitempty"`

	// A list of items (files or folders) selected in Drive.
	SelectedItems []DriveItemMetaData `json:"selectedItems,omitempty" yaml:"selectedItems,omitempty" mapstructure:"selectedItems,omitempty"`
}

// The Drive event object is the portion of the overall event object that carries
// information about a user's Google Drive and its contents. It's only present in
// an event object if the host application is Google Drive.
type DriveEventObject_1 struct {
	// The Drive item currently active.
	ActiveCursorItem *DriveItemMetaData_1 `json:"activeCursorItem,omitempty" yaml:"activeCursorItem,omitempty" mapstructure:"activeCursorItem,omitempty"`

	// A list of items (files or folders) selected in Drive.
	SelectedItems []DriveItemMetaData_1 `json:"selectedItems,omitempty" yaml:"selectedItems,omitempty" mapstructure:"selectedItems,omitempty"`
}

type DriveItemMetaData struct {
	// If true, the add-on has requested and received
	// https://www.googleapis.com/auth/drive.file scope authorization for this item;
	// otherwise this field is false.
	AddonHasFileScopePermission *bool `json:"addonHasFileScopePermission,omitempty" yaml:"addonHasFileScopePermission,omitempty" mapstructure:"addonHasFileScopePermission,omitempty"`

	// The URL of the icon that represents the selected item.
	IconUrl *string `json:"iconUrl,omitempty" yaml:"iconUrl,omitempty" mapstructure:"iconUrl,omitempty"`

	// The ID of the selected item.
	Id *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// The MIME type of the selected item.
	MimeType *string `json:"mimeType,omitempty" yaml:"mimeType,omitempty" mapstructure:"mimeType,omitempty"`

	// The title of the selected item.
	Title *string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`
}

type DriveItemMetaData_1 struct {
	// If true, the add-on has requested and received
	// https://www.googleapis.com/auth/drive.file scope authorization for this item;
	// otherwise this field is false.
	AddonHasFileScopePermission *bool `json:"addonHasFileScopePermission,omitempty" yaml:"addonHasFileScopePermission,omitempty" mapstructure:"addonHasFileScopePermission,omitempty"`

	// The URL of the icon that represents the selected item.
	IconUrl *string `json:"iconUrl,omitempty" yaml:"iconUrl,omitempty" mapstructure:"iconUrl,omitempty"`

	// The ID of the selected item.
	Id *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// The MIME type of the selected item.
	MimeType *string `json:"mimeType,omitempty" yaml:"mimeType,omitempty" mapstructure:"mimeType,omitempty"`

	// The title of the selected item.
	Title *string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`
}

type EditAttendeesActionMarkup struct {
	// AddAttendeeEmails corresponds to the JSON schema field "addAttendeeEmails".
	AddAttendeeEmails []string `json:"addAttendeeEmails,omitempty" yaml:"addAttendeeEmails,omitempty" mapstructure:"addAttendeeEmails,omitempty"`
}

type EditAttendeesActionMarkup_1 struct {
	// AddAttendeeEmails corresponds to the JSON schema field "addAttendeeEmails".
	AddAttendeeEmails []string `json:"addAttendeeEmails,omitempty" yaml:"addAttendeeEmails,omitempty" mapstructure:"addAttendeeEmails,omitempty"`
}

type EditConferenceDataActionMarkup struct {
	// "$ref": "./conferenceDataMarkupSchema.json#/definitions/conferenceDataMarkup
	SetConferenceData *string `json:"setConferenceData,omitempty" yaml:"setConferenceData,omitempty" mapstructure:"setConferenceData,omitempty"`
}

type EditConferenceDataActionMarkup_1 struct {
	// "$ref": "./conferenceDataMarkupSchema.json#/definitions/conferenceDataMarkup
	SetConferenceData *string `json:"setConferenceData,omitempty" yaml:"setConferenceData,omitempty" mapstructure:"setConferenceData,omitempty"`
}

type EditorClientActionMarkup struct {
	// RequestFileScopeForActiveDocument corresponds to the JSON schema field
	// "request_file_scope_for_active_document".
	RequestFileScopeForActiveDocument EditorClientActionMarkupRequestFileScopeForActiveDocument `json:"request_file_scope_for_active_document,omitempty" yaml:"request_file_scope_for_active_document,omitempty" mapstructure:"request_file_scope_for_active_document,omitempty"`
}

type EditorClientActionMarkupRequestFileScopeForActiveDocument map[string]interface{}

type EditorClientActionMarkupRequestFileScopeForActiveDocument_1 map[string]interface{}

type EditorClientActionMarkup_1 struct {
	// RequestFileScopeForActiveDocument corresponds to the JSON schema field
	// "request_file_scope_for_active_document".
	RequestFileScopeForActiveDocument EditorClientActionMarkupRequestFileScopeForActiveDocument_1 `json:"request_file_scope_for_active_document,omitempty" yaml:"request_file_scope_for_active_document,omitempty" mapstructure:"request_file_scope_for_active_document,omitempty"`
}

// Entry point objects carry information about the established means of accessing a
// given conference, such as by phone or video. This information is present in the
// event object if and only if the data is present in the Calendar event and the
// add-on sets its addOns.calendar.currentEventAccess manifest
// (https://developers.google.com/workspace/add-ons/concepts/manifests#calendar_fields)
// field to READ or READ_WRITE.
type EntryPoint interface{}

// Entry point objects carry information about the established means of accessing a
// given conference, such as by phone or video. This information is present in the
// event object if and only if the data is present in the Calendar event and the
// add-on sets its addOns.calendar.currentEventAccess manifest
// (https://developers.google.com/workspace/add-ons/concepts/manifests#calendar_fields)
// field to READ or READ_WRITE.
type EntryPoint_1 interface{}

// Event objects are JSON structures that are automatically constructed and passed
// as parameters to trigger or callback functions when a user interacts with an
// add-on (https://developers.google.com/workspace/add-ons/concepts/event-objects)
type EventObject struct {
	// Set for requests to HTTP endpoints
	AuthorizationEventObject *AuthorizationEventObject `json:"authorizationEventObject,omitempty" yaml:"authorizationEventObject,omitempty" mapstructure:"authorizationEventObject,omitempty"`

	// An object containing calendar and event information.
	Calendar *CalendarEventObject_1 `json:"calendar,omitempty" yaml:"calendar,omitempty" mapstructure:"calendar,omitempty"`

	// CommonEventObject corresponds to the JSON schema field "commonEventObject".
	CommonEventObject *CommonEventObject `json:"commonEventObject,omitempty" yaml:"commonEventObject,omitempty" mapstructure:"commonEventObject,omitempty"`

	// An object containing Docs information.
	Docs *DocsEventObject_1 `json:"docs,omitempty" yaml:"docs,omitempty" mapstructure:"docs,omitempty"`

	// An object containing Drive information.
	Drive *DriveEventObject_1 `json:"drive,omitempty" yaml:"drive,omitempty" mapstructure:"drive,omitempty"`

	// An object containing Gmail information.
	Gmail *GmailEventObject `json:"gmail,omitempty" yaml:"gmail,omitempty" mapstructure:"gmail,omitempty"`

	// An object containing Sheets information.
	Sheets *SheetsEventObject `json:"sheets,omitempty" yaml:"sheets,omitempty" mapstructure:"sheets,omitempty"`

	// An object containing Slides information.
	Slides *SlidesEventObject `json:"slides,omitempty" yaml:"slides,omitempty" mapstructure:"slides,omitempty"`
}

type GetAutocompletionResponse struct {
	// AutoComplete corresponds to the JSON schema field "autoComplete".
	AutoComplete Suggestions_1 `json:"autoComplete" yaml:"autoComplete" mapstructure:"autoComplete"`

	// This is a no-op schema field that may be present in the markup for syntax
	// checking.
	Schema *string `json:"schema,omitempty" yaml:"schema,omitempty" mapstructure:"schema,omitempty"`
}

type GmailClientActionMarkup struct {
	// Open Created Draft Action Markup
	OpenCreatedDraftActionMarkup *OpenCreatedDraftActionMarkup `json:"openCreatedDraftActionMarkup,omitempty" yaml:"openCreatedDraftActionMarkup,omitempty" mapstructure:"openCreatedDraftActionMarkup,omitempty"`

	// Update Draft Action Markup
	UpdateDraftActionMarkup *UpdateDraftActionMarkup `json:"updateDraftActionMarkup,omitempty" yaml:"updateDraftActionMarkup,omitempty" mapstructure:"updateDraftActionMarkup,omitempty"`
}

type GmailClientActionMarkup_1 struct {
	// Open Created Draft Action Markup
	OpenCreatedDraftActionMarkup *OpenCreatedDraftActionMarkup_1 `json:"openCreatedDraftActionMarkup,omitempty" yaml:"openCreatedDraftActionMarkup,omitempty" mapstructure:"openCreatedDraftActionMarkup,omitempty"`

	// Update Draft Action Markup
	UpdateDraftActionMarkup *UpdateDraftActionMarkup_1 `json:"updateDraftActionMarkup,omitempty" yaml:"updateDraftActionMarkup,omitempty" mapstructure:"updateDraftActionMarkup,omitempty"`
}

// The Gmail event object is the portion of the overall event object that carries
// information about a user's Gmail messages. It's only present in an event object
// if the host application is Gmail.
type GmailEventObject struct {
	// The Gmail-specific access token. You can use this token with the
	// "X-Goog-Gmail-Access-Token" HTTP header to grant your add-on temporary access
	// to a user's currently open Gmail message or let your add-on compose new drafts.
	AccessToken *string `json:"accessToken,omitempty" yaml:"accessToken,omitempty" mapstructure:"accessToken,omitempty"`

	// The list of "BCC:" recipient email addresses currently included in a draft the
	// add-on is composing
	BccRecipients []string `json:"bccRecipients,omitempty" yaml:"bccRecipients,omitempty" mapstructure:"bccRecipients,omitempty"`

	// The list of "CC:" recipient email addresses currently included in a draft the
	// add-on is composing
	CcRecipients []string `json:"ccRecipients,omitempty" yaml:"ccRecipients,omitempty" mapstructure:"ccRecipients,omitempty"`

	// The ID of the currently open Gmail message.
	MessageId *string `json:"messageId,omitempty" yaml:"messageId,omitempty" mapstructure:"messageId,omitempty"`

	// The currently open Gmail thread ID.
	ThreadId *string `json:"threadId,omitempty" yaml:"threadId,omitempty" mapstructure:"threadId,omitempty"`

	// The list of "To:" recipient email addresses currently included in a draft the
	// add-on is composing
	ToRecipients []string `json:"toRecipients,omitempty" yaml:"toRecipients,omitempty" mapstructure:"toRecipients,omitempty"`
}

// The Gmail event object is the portion of the overall event object that carries
// information about a user's Gmail messages. It's only present in an event object
// if the host application is Gmail.
type GmailEventObject_1 struct {
	// The Gmail-specific access token. You can use this token with the
	// "X-Goog-Gmail-Access-Token" HTTP header to grant your add-on temporary access
	// to a user's currently open Gmail message or let your add-on compose new drafts.
	AccessToken *string `json:"accessToken,omitempty" yaml:"accessToken,omitempty" mapstructure:"accessToken,omitempty"`

	// The list of "BCC:" recipient email addresses currently included in a draft the
	// add-on is composing
	BccRecipients []string `json:"bccRecipients,omitempty" yaml:"bccRecipients,omitempty" mapstructure:"bccRecipients,omitempty"`

	// The list of "CC:" recipient email addresses currently included in a draft the
	// add-on is composing
	CcRecipients []string `json:"ccRecipients,omitempty" yaml:"ccRecipients,omitempty" mapstructure:"ccRecipients,omitempty"`

	// The ID of the currently open Gmail message.
	MessageId *string `json:"messageId,omitempty" yaml:"messageId,omitempty" mapstructure:"messageId,omitempty"`

	// The currently open Gmail thread ID.
	ThreadId *string `json:"threadId,omitempty" yaml:"threadId,omitempty" mapstructure:"threadId,omitempty"`

	// The list of "To:" recipient email addresses currently included in a draft the
	// add-on is composing
	ToRecipients []string `json:"toRecipients,omitempty" yaml:"toRecipients,omitempty" mapstructure:"toRecipients,omitempty"`
}

// A grid that displays a collection of grid items.
type Grid struct {
	// The border style for the grid items.
	BorderStyle *BorderStyle `json:"borderStyle,omitempty" yaml:"borderStyle,omitempty" mapstructure:"borderStyle,omitempty"`

	// The number of columns in the grid.
	ColumnCount *float64 `json:"columnCount,omitempty" yaml:"columnCount,omitempty" mapstructure:"columnCount,omitempty"`

	// List of grid items.
	Items []Griditem `json:"items,omitempty" yaml:"items,omitempty" mapstructure:"items,omitempty"`

	// The action that executes when a grid item is clicked.
	OnClick *OnClick `json:"onClick,omitempty" yaml:"onClick,omitempty" mapstructure:"onClick,omitempty"`

	// The title of the grid.
	Title *string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`
}

// A grid that displays a collection of grid items.
type Grid_1 struct {
	// The border style for the grid items.
	BorderStyle *BorderStyle_1 `json:"borderStyle,omitempty" yaml:"borderStyle,omitempty" mapstructure:"borderStyle,omitempty"`

	// The number of columns in the grid.
	ColumnCount *float64 `json:"columnCount,omitempty" yaml:"columnCount,omitempty" mapstructure:"columnCount,omitempty"`

	// List of grid items.
	Items []Griditem_1 `json:"items,omitempty" yaml:"items,omitempty" mapstructure:"items,omitempty"`

	// The action that executes when a grid item is clicked.
	OnClick *OnClick_1 `json:"onClick,omitempty" yaml:"onClick,omitempty" mapstructure:"onClick,omitempty"`

	// The title of the grid.
	Title *string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`
}

// An item that can be displayed in a grid widget.
type Griditem struct {
	// An identifier for the grid item.
	Id *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// The image to display in the grid item.
	Image *ImageComponent `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// The grid item layout.
	Layout *GriditemLayout `json:"layout,omitempty" yaml:"layout,omitempty" mapstructure:"layout,omitempty"`

	// The subtitle of the grid item.
	Subtitle *string `json:"subtitle,omitempty" yaml:"subtitle,omitempty" mapstructure:"subtitle,omitempty"`

	// The text alignment for the grid item's text.
	TextAlignment *HorizontalAlignment `json:"textAlignment,omitempty" yaml:"textAlignment,omitempty" mapstructure:"textAlignment,omitempty"`

	// The title of the grid item.
	Title *string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`
}

type GriditemLayout string

const GriditemLayoutTEXTABOVE GriditemLayout = "TEXT_ABOVE"
const GriditemLayoutTEXTBELOW GriditemLayout = "TEXT_BELOW"

type GriditemLayout_1 string

const GriditemLayout_1_TEXTABOVE GriditemLayout_1 = "TEXT_ABOVE"
const GriditemLayout_1_TEXTBELOW GriditemLayout_1 = "TEXT_BELOW"

// An item that can be displayed in a grid widget.
type Griditem_1 struct {
	// An identifier for the grid item.
	Id *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// The image to display in the grid item.
	Image *ImageComponent_1 `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// The grid item layout.
	Layout *GriditemLayout_1 `json:"layout,omitempty" yaml:"layout,omitempty" mapstructure:"layout,omitempty"`

	// The subtitle of the grid item.
	Subtitle *string `json:"subtitle,omitempty" yaml:"subtitle,omitempty" mapstructure:"subtitle,omitempty"`

	// The text alignment for the grid item's text.
	TextAlignment *HorizontalAlignment_1 `json:"textAlignment,omitempty" yaml:"textAlignment,omitempty" mapstructure:"textAlignment,omitempty"`

	// The title of the grid item.
	Title *string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`
}

type HorizontalAlignment string

const HorizontalAlignmentCENTER HorizontalAlignment = "CENTER"
const HorizontalAlignmentEND HorizontalAlignment = "END"
const HorizontalAlignmentSTART HorizontalAlignment = "START"

type HorizontalAlignment_1 string

const HorizontalAlignment_1_CENTER HorizontalAlignment_1 = "CENTER"
const HorizontalAlignment_1_END HorizontalAlignment_1 = "END"
const HorizontalAlignment_1_START HorizontalAlignment_1 = "START"

type HostAppActionMarkup struct {
	// CalendarAction corresponds to the JSON schema field "calendarAction".
	CalendarAction *CalendarClientActionMarkup_1 `json:"calendarAction,omitempty" yaml:"calendarAction,omitempty" mapstructure:"calendarAction,omitempty"`

	// "$ref": "./drive_schema.json#/definitions/drive_client_action_markup
	DriveAction *string `json:"driveAction,omitempty" yaml:"driveAction,omitempty" mapstructure:"driveAction,omitempty"`

	// EditorAction corresponds to the JSON schema field "editor_action".
	EditorAction *EditorClientActionMarkup_1 `json:"editor_action,omitempty" yaml:"editor_action,omitempty" mapstructure:"editor_action,omitempty"`

	// GmailAction corresponds to the JSON schema field "gmailAction".
	GmailAction *GmailClientActionMarkup_1 `json:"gmailAction,omitempty" yaml:"gmailAction,omitempty" mapstructure:"gmailAction,omitempty"`
}

type HostAppActionMarkup_1 struct {
	// CalendarAction corresponds to the JSON schema field "calendarAction".
	CalendarAction *CalendarClientActionMarkup_1 `json:"calendarAction,omitempty" yaml:"calendarAction,omitempty" mapstructure:"calendarAction,omitempty"`

	// "$ref": "./drive_schema.json#/definitions/drive_client_action_markup
	DriveAction *string `json:"driveAction,omitempty" yaml:"driveAction,omitempty" mapstructure:"driveAction,omitempty"`

	// EditorAction corresponds to the JSON schema field "editor_action".
	EditorAction *EditorClientActionMarkup_1 `json:"editor_action,omitempty" yaml:"editor_action,omitempty" mapstructure:"editor_action,omitempty"`

	// GmailAction corresponds to the JSON schema field "gmailAction".
	GmailAction *GmailClientActionMarkup_1 `json:"gmailAction,omitempty" yaml:"gmailAction,omitempty" mapstructure:"gmailAction,omitempty"`
}

// The icon, can be specified by KnownIcon string or a URL.
type Icon struct {
	// The description of icon which is used for accessibility.
	AltText *string `json:"altText,omitempty" yaml:"altText,omitempty" mapstructure:"altText,omitempty"`
}

// The icon, can be specified by KnownIcon string or a URL.
type Icon_1 struct {
	// The description of icon which is used for accessibility.
	AltText *string `json:"altText,omitempty" yaml:"altText,omitempty" mapstructure:"altText,omitempty"`
}

// Image widget.
type Image struct {
	// Sets the alternative text of the image for accessibility.
	AltText *string `json:"altText,omitempty" yaml:"altText,omitempty" mapstructure:"altText,omitempty"`

	// Sets the image to use by providing its URL or data string.
	ImageUrl string `json:"imageUrl" yaml:"imageUrl" mapstructure:"imageUrl"`

	// Sets an action that executes when the object is clicked.
	OnClick *OnClick `json:"onClick,omitempty" yaml:"onClick,omitempty" mapstructure:"onClick,omitempty"`
}

// An image and its properties.
type ImageComponent struct {
	// The accessibility label for the image.
	AltText *string `json:"altText,omitempty" yaml:"altText,omitempty" mapstructure:"altText,omitempty"`

	// The border style to apply to the image.
	BorderStyle *BorderStyle `json:"borderStyle,omitempty" yaml:"borderStyle,omitempty" mapstructure:"borderStyle,omitempty"`

	// The crop style to apply to the image.
	CropStyle *ImageCropStyle `json:"cropStyle,omitempty" yaml:"cropStyle,omitempty" mapstructure:"cropStyle,omitempty"`

	// The URL for the image resource.
	ImageUri string `json:"imageUri" yaml:"imageUri" mapstructure:"imageUri"`
}

// An image and its properties.
type ImageComponent_1 struct {
	// The accessibility label for the image.
	AltText *string `json:"altText,omitempty" yaml:"altText,omitempty" mapstructure:"altText,omitempty"`

	// The border style to apply to the image.
	BorderStyle *BorderStyle_1 `json:"borderStyle,omitempty" yaml:"borderStyle,omitempty" mapstructure:"borderStyle,omitempty"`

	// The crop style to apply to the image.
	CropStyle *ImageCropStyle_1 `json:"cropStyle,omitempty" yaml:"cropStyle,omitempty" mapstructure:"cropStyle,omitempty"`

	// The URL for the image resource.
	ImageUri string `json:"imageUri" yaml:"imageUri" mapstructure:"imageUri"`
}

// A crop style that can be applied to images.
type ImageCropStyle struct {
	// The aspect ratio for a custom rectangular crop.
	AspectRatio *float64 `json:"aspectRatio,omitempty" yaml:"aspectRatio,omitempty" mapstructure:"aspectRatio,omitempty"`

	// The crop type.
	Type ImageCropStyleType `json:"type" yaml:"type" mapstructure:"type"`
}

type ImageCropStyleType string

const ImageCropStyleTypeCIRCLE ImageCropStyleType = "CIRCLE"
const ImageCropStyleTypeRECTANGLE43 ImageCropStyleType = "RECTANGLE_4_3"
const ImageCropStyleTypeRECTANGLECUSTOM ImageCropStyleType = "RECTANGLE_CUSTOM"
const ImageCropStyleTypeSQUARE ImageCropStyleType = "SQUARE"

type ImageCropStyleType_1 string

const ImageCropStyleType_1_CIRCLE ImageCropStyleType_1 = "CIRCLE"
const ImageCropStyleType_1_RECTANGLE43 ImageCropStyleType_1 = "RECTANGLE_4_3"
const ImageCropStyleType_1_RECTANGLECUSTOM ImageCropStyleType_1 = "RECTANGLE_CUSTOM"
const ImageCropStyleType_1_SQUARE ImageCropStyleType_1 = "SQUARE"

// A crop style that can be applied to images.
type ImageCropStyle_1 struct {
	// The aspect ratio for a custom rectangular crop.
	AspectRatio *float64 `json:"aspectRatio,omitempty" yaml:"aspectRatio,omitempty" mapstructure:"aspectRatio,omitempty"`

	// The crop type.
	Type ImageCropStyleType_1 `json:"type" yaml:"type" mapstructure:"type"`
}

// Image widget.
type Image_1 struct {
	// Sets the alternative text of the image for accessibility.
	AltText *string `json:"altText,omitempty" yaml:"altText,omitempty" mapstructure:"altText,omitempty"`

	// Sets the image to use by providing its URL or data string.
	ImageUrl string `json:"imageUrl" yaml:"imageUrl" mapstructure:"imageUrl"`

	// Sets an action that executes when the object is clicked.
	OnClick *OnClick_1 `json:"onClick,omitempty" yaml:"onClick,omitempty" mapstructure:"onClick,omitempty"`
}

type InsertContent struct {
	// The content to be inserted
	Content *string `json:"content,omitempty" yaml:"content,omitempty" mapstructure:"content,omitempty"`

	// The type of inserted content
	ContentType *InsertContentContentType `json:"contentType,omitempty" yaml:"contentType,omitempty" mapstructure:"contentType,omitempty"`
}

type InsertContentContentType string

const InsertContentContentTypeIMMUTABLEHTML InsertContentContentType = "IMMUTABLE_HTML"
const InsertContentContentTypeMUTABLEHTML InsertContentContentType = "MUTABLE_HTML"
const InsertContentContentTypeTEXT InsertContentContentType = "TEXT"

type InsertContentContentType_1 string

const InsertContentContentType_1_IMMUTABLEHTML InsertContentContentType_1 = "IMMUTABLE_HTML"
const InsertContentContentType_1_MUTABLEHTML InsertContentContentType_1 = "MUTABLE_HTML"
const InsertContentContentType_1_TEXT InsertContentContentType_1 = "TEXT"

type InsertContent_1 struct {
	// The content to be inserted
	Content *string `json:"content,omitempty" yaml:"content,omitempty" mapstructure:"content,omitempty"`

	// The type of inserted content
	ContentType *InsertContentContentType_1 `json:"contentType,omitempty" yaml:"contentType,omitempty" mapstructure:"contentType,omitempty"`
}

type Navigation struct {
	// Card stack pops one card off.
	Pop *bool `json:"pop,omitempty" yaml:"pop,omitempty" mapstructure:"pop,omitempty"`

	// Card stack pops all cards above the specified card with given card name.
	PopToCard *string `json:"popToCard,omitempty" yaml:"popToCard,omitempty" mapstructure:"popToCard,omitempty"`

	// Card stack pops all card off except the root card.
	PopToRoot *bool `json:"popToRoot,omitempty" yaml:"popToRoot,omitempty" mapstructure:"popToRoot,omitempty"`

	// A card to push on top of the stack, which will be shown to end users.
	PushCard *Card_1 `json:"pushCard,omitempty" yaml:"pushCard,omitempty" mapstructure:"pushCard,omitempty"`

	// Card stack updates the top card with a new card, preserving filled form
	// fields values. For non-equivalent field, the value is dropped.
	UpdateCard *Card_1 `json:"updateCard,omitempty" yaml:"updateCard,omitempty" mapstructure:"updateCard,omitempty"`
}

type Navigation_1 struct {
	// Card stack pops one card off.
	Pop *bool `json:"pop,omitempty" yaml:"pop,omitempty" mapstructure:"pop,omitempty"`

	// Card stack pops all cards above the specified card with given card name.
	PopToCard *string `json:"popToCard,omitempty" yaml:"popToCard,omitempty" mapstructure:"popToCard,omitempty"`

	// Card stack pops all card off except the root card.
	PopToRoot *bool `json:"popToRoot,omitempty" yaml:"popToRoot,omitempty" mapstructure:"popToRoot,omitempty"`

	// A card to push on top of the stack, which will be shown to end users.
	PushCard *Card_1 `json:"pushCard,omitempty" yaml:"pushCard,omitempty" mapstructure:"pushCard,omitempty"`

	// Card stack updates the top card with a new card, preserving filled form
	// fields values. For non-equivalent field, the value is dropped.
	UpdateCard *Card_1 `json:"updateCard,omitempty" yaml:"updateCard,omitempty" mapstructure:"updateCard,omitempty"`
}

// Card action which displays a notification in the host app.
type Notification struct {
	// Plain text to display for the notification, without html tags.
	Text *string `json:"text,omitempty" yaml:"text,omitempty" mapstructure:"text,omitempty"`
}

// Card action which displays a notification in the host app.
type Notification_1 struct {
	// Plain text to display for the notification, without html tags.
	Text *string `json:"text,omitempty" yaml:"text,omitempty" mapstructure:"text,omitempty"`
}

type OnClick struct {
	// An action is triggered by this onClick, if specified.
	Action *Action `json:"action,omitempty" yaml:"action,omitempty" mapstructure:"action,omitempty"`

	// A new card is pushed to the card stack after clicking if specified.
	Card *Card `json:"card,omitempty" yaml:"card,omitempty" mapstructure:"card,omitempty"`

	// An add-on triggers this action when the action needs to open a link.
	// This differs from the openLink above in that this needs to talk to server to
	// get the link.
	// Thus some preparation work is required for web client to do before the open
	// link action response comes back.
	OpenDynamicLinkAction *Action `json:"openDynamicLinkAction,omitempty" yaml:"openDynamicLinkAction,omitempty" mapstructure:"openDynamicLinkAction,omitempty"`

	// This onClick triggers an open link action if specified.
	OpenLink OpenLink `json:"openLink,omitempty" yaml:"openLink,omitempty" mapstructure:"openLink,omitempty"`
}

type OnClick_1 struct {
	// An action is triggered by this onClick, if specified.
	Action *Action_1 `json:"action,omitempty" yaml:"action,omitempty" mapstructure:"action,omitempty"`

	// A new card is pushed to the card stack after clicking if specified.
	Card *Card_1 `json:"card,omitempty" yaml:"card,omitempty" mapstructure:"card,omitempty"`

	// An add-on triggers this action when the action needs to open a link.
	// This differs from the openLink above in that this needs to talk to server to
	// get the link.
	// Thus some preparation work is required for web client to do before the open
	// link action response comes back.
	OpenDynamicLinkAction *Action_1 `json:"openDynamicLinkAction,omitempty" yaml:"openDynamicLinkAction,omitempty" mapstructure:"openDynamicLinkAction,omitempty"`

	// This onClick triggers an open link action if specified.
	OpenLink OpenLink_1 `json:"openLink,omitempty" yaml:"openLink,omitempty" mapstructure:"openLink,omitempty"`
}

type OpenCreatedDraftActionMarkup struct {
	// The ID of the newly-created draft in the form "r123".
	DraftId *string `json:"draftId,omitempty" yaml:"draftId,omitempty" mapstructure:"draftId,omitempty"`

	// The ID of the thread containing the newly-created draft, e.g.,
	// "15e9fa622ce1029d".
	DraftThreadId *string `json:"draftThreadId,omitempty" yaml:"draftThreadId,omitempty" mapstructure:"draftThreadId,omitempty"`
}

type OpenCreatedDraftActionMarkup_1 struct {
	// The ID of the newly-created draft in the form "r123".
	DraftId *string `json:"draftId,omitempty" yaml:"draftId,omitempty" mapstructure:"draftId,omitempty"`

	// The ID of the thread containing the newly-created draft, e.g.,
	// "15e9fa622ce1029d".
	DraftThreadId *string `json:"draftThreadId,omitempty" yaml:"draftThreadId,omitempty" mapstructure:"draftThreadId,omitempty"`
}

// Opens a URL
type OpenLink interface{}

// Opens a URL
type OpenLink_1 interface{}

// An object containing a map of defined parameter data for use by the add-on.
type Parameters interface{}

// An object containing a map of defined parameter data for use by the add-on.
type Parameters_1 interface{}

// recipient
type Recipient struct {
	// Email corresponds to the JSON schema field "email".
	Email *string `json:"email,omitempty" yaml:"email,omitempty" mapstructure:"email,omitempty"`
}

// recipient
type Recipient_1 struct {
	// Email corresponds to the JSON schema field "email".
	Email *string `json:"email,omitempty" yaml:"email,omitempty" mapstructure:"email,omitempty"`
}

type RenderAction struct {
	// Google Workspace add-on response to interact with the end user. The most common
	// interaction is to render a card with a navigation.
	Action *Action_2 `json:"action,omitempty" yaml:"action,omitempty" mapstructure:"action,omitempty"`

	// Actions handled by individual host apps.
	HostAppAction *HostAppActionMarkup_1 `json:"hostAppAction,omitempty" yaml:"hostAppAction,omitempty" mapstructure:"hostAppAction,omitempty"`

	// This is a no-op schema field that may be present in the markup for syntax
	//  checking.
	Schema *string `json:"schema,omitempty" yaml:"schema,omitempty" mapstructure:"schema,omitempty"`
}

type RenderAction_1 struct {
	// Google Workspace add-on response to interact with the end user. The most common
	// interaction is to render a card with a navigation.
	Action *Action_3 `json:"action,omitempty" yaml:"action,omitempty" mapstructure:"action,omitempty"`

	// Actions handled by individual host apps.
	HostAppAction *HostAppActionMarkup_1 `json:"hostAppAction,omitempty" yaml:"hostAppAction,omitempty" mapstructure:"hostAppAction,omitempty"`

	// This is a no-op schema field that may be present in the markup for syntax
	//  checking.
	Schema *string `json:"schema,omitempty" yaml:"schema,omitempty" mapstructure:"schema,omitempty"`
}

type Section struct {
	// Whether section can be collapsed or not.
	Collapsible *bool `json:"collapsible,omitempty" yaml:"collapsible,omitempty" mapstructure:"collapsible,omitempty"`

	// The text header of a section
	Header *string `json:"header,omitempty" yaml:"header,omitempty" mapstructure:"header,omitempty"`

	// The number of uncollapsable widgets
	UncollapsibleWidgetsCount *float64 `json:"uncollapsibleWidgetsCount,omitempty" yaml:"uncollapsibleWidgetsCount,omitempty" mapstructure:"uncollapsibleWidgetsCount,omitempty"`

	// The widgets within a section. Example of a widget is TextParagraph or Image.
	Widgets []Widget `json:"widgets" yaml:"widgets" mapstructure:"widgets"`
}

type Section_1 struct {
	// Whether section can be collapsed or not.
	Collapsible *bool `json:"collapsible,omitempty" yaml:"collapsible,omitempty" mapstructure:"collapsible,omitempty"`

	// The text header of a section
	Header *string `json:"header,omitempty" yaml:"header,omitempty" mapstructure:"header,omitempty"`

	// The number of uncollapsable widgets
	UncollapsibleWidgetsCount *float64 `json:"uncollapsibleWidgetsCount,omitempty" yaml:"uncollapsibleWidgetsCount,omitempty" mapstructure:"uncollapsibleWidgetsCount,omitempty"`

	// The widgets within a section. Example of a widget is TextParagraph or Image.
	Widgets []Widget_1 `json:"widgets" yaml:"widgets" mapstructure:"widgets"`
}

// A widget which creates a UI item (for example, a drop-down list) with options
// for users to select.
type SelectionInput interface{}

// A widget which creates a UI item (for example, a drop-down list) with options
// for users to select.
type SelectionInput_1 interface{}

// The item in the switch control.
type SelectionItem struct {
	// If more than one items are selected for RADIO_BUTTON or DROPDOWN,
	// the first selected item is treated as selected and the after ones are all
	// ignored.
	Selected *bool `json:"selected,omitempty" yaml:"selected,omitempty" mapstructure:"selected,omitempty"`

	// The text to be displayed
	Text *string `json:"text,omitempty" yaml:"text,omitempty" mapstructure:"text,omitempty"`

	// The value associated with this item which is sent back to Apps Script.
	// The client should use this as a form input value.
	Value *string `json:"value,omitempty" yaml:"value,omitempty" mapstructure:"value,omitempty"`
}

// The item in the switch control.
type SelectionItem_1 struct {
	// If more than one items are selected for RADIO_BUTTON or DROPDOWN,
	// the first selected item is treated as selected and the after ones are all
	// ignored.
	Selected *bool `json:"selected,omitempty" yaml:"selected,omitempty" mapstructure:"selected,omitempty"`

	// The text to be displayed
	Text *string `json:"text,omitempty" yaml:"text,omitempty" mapstructure:"text,omitempty"`

	// The value associated with this item which is sent back to Apps Script.
	// The client should use this as a form input value.
	Value *string `json:"value,omitempty" yaml:"value,omitempty" mapstructure:"value,omitempty"`
}

// The Docs event object is the portion of the overall event object that carries
// information about a user's Google Sheet and its contents. It's only present in
// an event object if the host application is Google Sheets.
type SheetsEventObject struct {
	//  Whether or not the add-on has drive.file scope permission for this document.
	AddonHasFileScopePermission *bool `json:"addonHasFileScopePermission,omitempty" yaml:"addonHasFileScopePermission,omitempty" mapstructure:"addonHasFileScopePermission,omitempty"`

	// The ID of the document open in the Sheets UI
	Id *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// The title of the document open in the Sheets UI
	Title *string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`
}

// The Docs event object is the portion of the overall event object that carries
// information about a user's Google Sheet and its contents. It's only present in
// an event object if the host application is Google Sheets.
type SheetsEventObject_1 struct {
	//  Whether or not the add-on has drive.file scope permission for this document.
	AddonHasFileScopePermission *bool `json:"addonHasFileScopePermission,omitempty" yaml:"addonHasFileScopePermission,omitempty" mapstructure:"addonHasFileScopePermission,omitempty"`

	// The ID of the document open in the Sheets UI
	Id *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// The title of the document open in the Sheets UI
	Title *string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`
}

// The Slides event object is the portion of the overall event object that carries
// information about a user's Google Slides document. It's only present in an event
// object if the host application is Google Slides.
type SlidesEventObject struct {
	//  Whether or not the add-on has drive.file scope permission for this document.
	AddonHasFileScopePermission *bool `json:"addonHasFileScopePermission,omitempty" yaml:"addonHasFileScopePermission,omitempty" mapstructure:"addonHasFileScopePermission,omitempty"`

	// The ID of the document open in the Slides UI
	Id *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// The title of the document open in the Slides UI
	Title *string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`
}

// The Slides event object is the portion of the overall event object that carries
// information about a user's Google Slides document. It's only present in an event
// object if the host application is Google Slides.
type SlidesEventObject_1 struct {
	//  Whether or not the add-on has drive.file scope permission for this document.
	AddonHasFileScopePermission *bool `json:"addonHasFileScopePermission,omitempty" yaml:"addonHasFileScopePermission,omitempty" mapstructure:"addonHasFileScopePermission,omitempty"`

	// The ID of the document open in the Slides UI
	Id *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// The title of the document open in the Slides UI
	Title *string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`
}

// Input parameter for regular widgets.
// For single-valued widgets, it will be a single value list; for
// multi-valued widgets, such as checkbox, all the values are presented.
type StringInputs struct {
	// Value corresponds to the JSON schema field "value".
	Value []string `json:"value,omitempty" yaml:"value,omitempty" mapstructure:"value,omitempty"`
}

type SubmitFormResponse struct {
	// RenderActions corresponds to the JSON schema field "renderActions".
	RenderActions RenderAction_1 `json:"renderActions" yaml:"renderActions" mapstructure:"renderActions"`

	// Whether the state of the cards has changed and data in existing cards is stale.
	StateChanged *bool `json:"stateChanged,omitempty" yaml:"stateChanged,omitempty" mapstructure:"stateChanged,omitempty"`
}

// A Suggestion Item. Only supports text for now.
type SuggestionItem struct {
	// Text.
	Text *string `json:"text,omitempty" yaml:"text,omitempty" mapstructure:"text,omitempty"`
}

// A Suggestion Item. Only supports text for now.
type SuggestionItem_1 struct {
	// Text.
	Text *string `json:"text,omitempty" yaml:"text,omitempty" mapstructure:"text,omitempty"`
}

// A container wrapping elements necessary for showing suggestion items used in
// text input autocomplete.
type Suggestions interface{}

// A container wrapping elements necessary for showing suggestion items used in
// text input autocomplete.
type Suggestions_1 interface{}

type SwitchControl struct {
	// The control type, it could be either Switch or Checkbox.
	ControlType *SwitchControlControlType `json:"controlType,omitempty" yaml:"controlType,omitempty" mapstructure:"controlType,omitempty"`

	// The name of the switch widget which is used in formInput.
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// The action when the switch state is changed.
	OnChangeAction *Action `json:"onChangeAction,omitempty" yaml:"onChangeAction,omitempty" mapstructure:"onChangeAction,omitempty"`

	// If the switch is selected.
	Selected *bool `json:"selected,omitempty" yaml:"selected,omitempty" mapstructure:"selected,omitempty"`

	// The value is what is passed back in the Apps Script callback.
	Value *string `json:"value,omitempty" yaml:"value,omitempty" mapstructure:"value,omitempty"`
}

type SwitchControlControlType string

const SwitchControlControlTypeCHECKBOX SwitchControlControlType = "CHECKBOX"
const SwitchControlControlTypeSWITCH SwitchControlControlType = "SWITCH"

type SwitchControlControlType_1 string

const SwitchControlControlType_1_CHECKBOX SwitchControlControlType_1 = "CHECKBOX"
const SwitchControlControlType_1_SWITCH SwitchControlControlType_1 = "SWITCH"

type SwitchControl_1 struct {
	// The control type, it could be either Switch or Checkbox.
	ControlType *SwitchControlControlType_1 `json:"controlType,omitempty" yaml:"controlType,omitempty" mapstructure:"controlType,omitempty"`

	// The name of the switch widget which is used in formInput.
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// The action when the switch state is changed.
	OnChangeAction *Action_1 `json:"onChangeAction,omitempty" yaml:"onChangeAction,omitempty" mapstructure:"onChangeAction,omitempty"`

	// If the switch is selected.
	Selected *bool `json:"selected,omitempty" yaml:"selected,omitempty" mapstructure:"selected,omitempty"`

	// The value is what is passed back in the Apps Script callback.
	Value *string `json:"value,omitempty" yaml:"value,omitempty" mapstructure:"value,omitempty"`
}

// A text input is a UI item where the users can input text.
type TextInput struct {
	// The refresh function which returns suggestions based on the user's input text.
	AutoCompleteAction *Action `json:"autoCompleteAction,omitempty" yaml:"autoCompleteAction,omitempty" mapstructure:"autoCompleteAction,omitempty"`

	// The hint text.
	HintText *string `json:"hintText,omitempty" yaml:"hintText,omitempty" mapstructure:"hintText,omitempty"`

	// The initial suggestions made before any user input
	InitialSuggestions Suggestions `json:"initialSuggestions,omitempty" yaml:"initialSuggestions,omitempty" mapstructure:"initialSuggestions,omitempty"`

	// At least one of label and hintText is required to be specified.
	Label *string `json:"label,omitempty" yaml:"label,omitempty" mapstructure:"label,omitempty"`

	// When set to true, a user can input multiple suggestions items.
	MultipleSuggestions *bool `json:"multipleSuggestions,omitempty" yaml:"multipleSuggestions,omitempty" mapstructure:"multipleSuggestions,omitempty"`

	// The name of the text input which is used in formInput.
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// The onChange action (for example, invoke an Apps Script)
	OnChangeAction *Action `json:"onChangeAction,omitempty" yaml:"onChangeAction,omitempty" mapstructure:"onChangeAction,omitempty"`

	// The style of the text (for example, single line or multiple line).
	Type *TextInputType `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// The default value when no input from user.
	Value *string `json:"value,omitempty" yaml:"value,omitempty" mapstructure:"value,omitempty"`
}

type TextInputType string

const TextInputTypeMULTIPLELINE TextInputType = "MULTIPLE_LINE"
const TextInputTypeSINGLELINE TextInputType = "SINGLE_LINE"

type TextInputType_1 string

const TextInputType_1_MULTIPLELINE TextInputType_1 = "MULTIPLE_LINE"
const TextInputType_1_SINGLELINE TextInputType_1 = "SINGLE_LINE"

// A text input is a UI item where the users can input text.
type TextInput_1 struct {
	// The refresh function which returns suggestions based on the user's input text.
	AutoCompleteAction *Action_1 `json:"autoCompleteAction,omitempty" yaml:"autoCompleteAction,omitempty" mapstructure:"autoCompleteAction,omitempty"`

	// The hint text.
	HintText *string `json:"hintText,omitempty" yaml:"hintText,omitempty" mapstructure:"hintText,omitempty"`

	// The initial suggestions made before any user input
	InitialSuggestions Suggestions_1 `json:"initialSuggestions,omitempty" yaml:"initialSuggestions,omitempty" mapstructure:"initialSuggestions,omitempty"`

	// At least one of label and hintText is required to be specified.
	Label *string `json:"label,omitempty" yaml:"label,omitempty" mapstructure:"label,omitempty"`

	// When set to true, a user can input multiple suggestions items.
	MultipleSuggestions *bool `json:"multipleSuggestions,omitempty" yaml:"multipleSuggestions,omitempty" mapstructure:"multipleSuggestions,omitempty"`

	// The name of the text input which is used in formInput.
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// The onChange action (for example, invoke an Apps Script)
	OnChangeAction *Action_1 `json:"onChangeAction,omitempty" yaml:"onChangeAction,omitempty" mapstructure:"onChangeAction,omitempty"`

	// The style of the text (for example, single line or multiple line).
	Type *TextInputType_1 `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// The default value when no input from user.
	Value *string `json:"value,omitempty" yaml:"value,omitempty" mapstructure:"value,omitempty"`
}

// Text paragraph widget.
type TextParagraph struct {
	// The text of the paragraph. Can contain formatted text.
	Text string `json:"text" yaml:"text" mapstructure:"text"`
}

// Text paragraph widget.
type TextParagraph_1 struct {
	// The text of the paragraph. Can contain formatted text.
	Text string `json:"text" yaml:"text" mapstructure:"text"`
}

// Input Parameter for Time Picker widget.
type TimeInput struct {
	// The hour number selected by the user.
	Hours *int `json:"hours,omitempty" yaml:"hours,omitempty" mapstructure:"hours,omitempty"`

	// The minute number selected by the user.
	Minutes *int `json:"minutes,omitempty" yaml:"minutes,omitempty" mapstructure:"minutes,omitempty"`
}

type TimeZone struct {
	// The timezone identifier of the user's timezone. Examples include:
	// America/New_York, Europe/Vienna, and Asia/Seoul. To enable this field, you must
	// set `addOns.common.useLocaleFromApp` to `true` in your add-on's manifest. Your
	// add-on's scope list must also include
	// `https://www.googleapis.com/auth/script.locale`. See
	// https://developers.google.com/workspace/add-ons/how-tos/access-user-locale for
	// more details
	Id *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// The time offset from Coordinated Universal Time (UTC) of the user's timezone,
	// measured in milliseconds. See
	// https://developers.google.com/workspace/add-ons/how-tos/access-user-locale for
	// more details
	Offset *int `json:"offset,omitempty" yaml:"offset,omitempty" mapstructure:"offset,omitempty"`
}

// If set, replaces the existing Bcc recipients of the draft the user is currently
// editing.
type UpdateBccRecipients struct {
	// BCC Recipients
	BccRecipients []Recipient `json:"BccRecipients,omitempty" yaml:"BccRecipients,omitempty" mapstructure:"BccRecipients,omitempty"`
}

// If set, replaces the existing Bcc recipients of the draft the user is currently
// editing.
type UpdateBccRecipients_1 struct {
	// BCC Recipients
	BccRecipients []Recipient_1 `json:"BccRecipients,omitempty" yaml:"BccRecipients,omitempty" mapstructure:"BccRecipients,omitempty"`
}

// A field which contains a series of updates action to perform on the draft
//
//	body that user is currently editing.
type UpdateBody struct {
	// A repeated field which contains a series of insert content to perform
	//  on the draft that user is currently editing. The content currently
	//  contains 1) HTML content or 2) plain text content.
	InsertContents []InsertContent `json:"insertContents,omitempty" yaml:"insertContents,omitempty" mapstructure:"insertContents,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *UpdateBodyType `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type UpdateBodyType string

const UpdateBodyTypeINPLACEINSERT UpdateBodyType = "IN_PLACE_INSERT"

type UpdateBodyType_1 string

const UpdateBodyType_1_INPLACEINSERT UpdateBodyType_1 = "IN_PLACE_INSERT"

// A field which contains a series of updates action to perform on the draft
//
//	body that user is currently editing.
type UpdateBody_1 struct {
	// A repeated field which contains a series of insert content to perform
	//  on the draft that user is currently editing. The content currently
	//  contains 1) HTML content or 2) plain text content.
	InsertContents []InsertContent_1 `json:"insertContents,omitempty" yaml:"insertContents,omitempty" mapstructure:"insertContents,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *UpdateBodyType_1 `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// If set, replaces the existing Cc recipients of the draft the user is currently
// editing.
type UpdateCcRecipients struct {
	// CC Recipients
	CcRecipients []Recipient `json:"CcRecipients,omitempty" yaml:"CcRecipients,omitempty" mapstructure:"CcRecipients,omitempty"`
}

// If set, replaces the existing Cc recipients of the draft the user is currently
// editing.
type UpdateCcRecipients_1 struct {
	// CC Recipients
	CcRecipients []Recipient_1 `json:"CcRecipients,omitempty" yaml:"CcRecipients,omitempty" mapstructure:"CcRecipients,omitempty"`
}

type UpdateDraftActionMarkup struct {
	// Update BCC Recipients.
	UpdateBccRecipients *UpdateBccRecipients `json:"updateBccRecipients,omitempty" yaml:"updateBccRecipients,omitempty" mapstructure:"updateBccRecipients,omitempty"`

	// UpdateBody corresponds to the JSON schema field "updateBody".
	UpdateBody *UpdateBody `json:"updateBody,omitempty" yaml:"updateBody,omitempty" mapstructure:"updateBody,omitempty"`

	// Update CC Recipients.
	UpdateCcRecipients *UpdateCcRecipients `json:"updateCcRecipients,omitempty" yaml:"updateCcRecipients,omitempty" mapstructure:"updateCcRecipients,omitempty"`

	// Update Subject
	UpdateSubject *UpdateSubject `json:"updateSubject,omitempty" yaml:"updateSubject,omitempty" mapstructure:"updateSubject,omitempty"`

	// Update To Recipients.
	UpdateToRecipients *UpdateToRecipients `json:"updateToRecipients,omitempty" yaml:"updateToRecipients,omitempty" mapstructure:"updateToRecipients,omitempty"`
}

type UpdateDraftActionMarkup_1 struct {
	// Update BCC Recipients.
	UpdateBccRecipients *UpdateBccRecipients_1 `json:"updateBccRecipients,omitempty" yaml:"updateBccRecipients,omitempty" mapstructure:"updateBccRecipients,omitempty"`

	// UpdateBody corresponds to the JSON schema field "updateBody".
	UpdateBody *UpdateBody_1 `json:"updateBody,omitempty" yaml:"updateBody,omitempty" mapstructure:"updateBody,omitempty"`

	// Update CC Recipients.
	UpdateCcRecipients *UpdateCcRecipients_1 `json:"updateCcRecipients,omitempty" yaml:"updateCcRecipients,omitempty" mapstructure:"updateCcRecipients,omitempty"`

	// Update Subject
	UpdateSubject *UpdateSubject_1 `json:"updateSubject,omitempty" yaml:"updateSubject,omitempty" mapstructure:"updateSubject,omitempty"`

	// Update To Recipients.
	UpdateToRecipients *UpdateToRecipients_1 `json:"updateToRecipients,omitempty" yaml:"updateToRecipients,omitempty" mapstructure:"updateToRecipients,omitempty"`
}

// If set, replaces the existing subject of the draft the user is currently
// editing.
type UpdateSubject struct {
	// Subject corresponds to the JSON schema field "subject".
	Subject *string `json:"subject,omitempty" yaml:"subject,omitempty" mapstructure:"subject,omitempty"`
}

// If set, replaces the existing subject of the draft the user is currently
// editing.
type UpdateSubject_1 struct {
	// Subject corresponds to the JSON schema field "subject".
	Subject *string `json:"subject,omitempty" yaml:"subject,omitempty" mapstructure:"subject,omitempty"`
}

// If set, replaces the existing To recipients of the draft the user is currently
// editing.
type UpdateToRecipients struct {
	// To Recipients
	ToRecipients []Recipient `json:"toRecipients,omitempty" yaml:"toRecipients,omitempty" mapstructure:"toRecipients,omitempty"`
}

// If set, replaces the existing To recipients of the draft the user is currently
// editing.
type UpdateToRecipients_1 struct {
	// To Recipients
	ToRecipients []Recipient_1 `json:"toRecipients,omitempty" yaml:"toRecipients,omitempty" mapstructure:"toRecipients,omitempty"`
}

type Widget struct {
	// A List of buttons
	ButtonList *ButtonList `json:"buttonList,omitempty" yaml:"buttonList,omitempty" mapstructure:"buttonList,omitempty"`

	// Display a date/time picker in this widget
	DateTimePicker DateTimePicker `json:"dateTimePicker,omitempty" yaml:"dateTimePicker,omitempty" mapstructure:"dateTimePicker,omitempty"`

	// Display a decorated text item in this widget
	DecoratedText *DecoratedText `json:"decoratedText,omitempty" yaml:"decoratedText,omitempty" mapstructure:"decoratedText,omitempty"`

	// Inserts a divider.
	Divider Divider `json:"divider,omitempty" yaml:"divider,omitempty" mapstructure:"divider,omitempty"`

	// Display a grid control in this widget.
	Grid *Grid `json:"grid,omitempty" yaml:"grid,omitempty" mapstructure:"grid,omitempty"`

	// The horizontal alignment of this widget.
	HorizontalAlignment *HorizontalAlignment `json:"horizontalAlignment,omitempty" yaml:"horizontalAlignment,omitempty" mapstructure:"horizontalAlignment,omitempty"`

	// Display an image in this widget
	Image *Image `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// Display a switch control in this widget
	SelectionInput SelectionInput `json:"selectionInput,omitempty" yaml:"selectionInput,omitempty" mapstructure:"selectionInput,omitempty"`

	// Display a text input in this widget
	TextInput *TextInput `json:"textInput,omitempty" yaml:"textInput,omitempty" mapstructure:"textInput,omitempty"`

	// Display a text paragraph in this widget
	TextParagraph *TextParagraph `json:"textParagraph,omitempty" yaml:"textParagraph,omitempty" mapstructure:"textParagraph,omitempty"`
}

type Widget_1 struct {
	// A List of buttons
	ButtonList *ButtonList_1 `json:"buttonList,omitempty" yaml:"buttonList,omitempty" mapstructure:"buttonList,omitempty"`

	// Display a date/time picker in this widget
	DateTimePicker DateTimePicker_1 `json:"dateTimePicker,omitempty" yaml:"dateTimePicker,omitempty" mapstructure:"dateTimePicker,omitempty"`

	// Display a decorated text item in this widget
	DecoratedText *DecoratedText_1 `json:"decoratedText,omitempty" yaml:"decoratedText,omitempty" mapstructure:"decoratedText,omitempty"`

	// Inserts a divider.
	Divider Divider_1 `json:"divider,omitempty" yaml:"divider,omitempty" mapstructure:"divider,omitempty"`

	// Display a grid control in this widget.
	Grid *Grid_1 `json:"grid,omitempty" yaml:"grid,omitempty" mapstructure:"grid,omitempty"`

	// The horizontal alignment of this widget.
	HorizontalAlignment *HorizontalAlignment_1 `json:"horizontalAlignment,omitempty" yaml:"horizontalAlignment,omitempty" mapstructure:"horizontalAlignment,omitempty"`

	// Display an image in this widget
	Image *Image_1 `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// Display a switch control in this widget
	SelectionInput SelectionInput_1 `json:"selectionInput,omitempty" yaml:"selectionInput,omitempty" mapstructure:"selectionInput,omitempty"`

	// Display a text input in this widget
	TextInput *TextInput_1 `json:"textInput,omitempty" yaml:"textInput,omitempty" mapstructure:"textInput,omitempty"`

	// Display a text paragraph in this widget
	TextParagraph *TextParagraph_1 `json:"textParagraph,omitempty" yaml:"textParagraph,omitempty" mapstructure:"textParagraph,omitempty"`
}
